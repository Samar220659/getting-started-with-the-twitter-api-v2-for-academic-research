[supervisord]
nodaemon=true
logfile=/app/logs/supervisord.log
pidfile=/app/logs/supervisord.pid
user=root

[unix_http_server]
file=/app/logs/supervisor.sock

[supervisorctl]
serverurl=unix:///app/logs/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:backend]
command=uvicorn server:app --host 0.0.0.0 --port 8001 --reload
directory=/app/backend
stdout_logfile=/app/logs/backend.log
stderr_logfile=/app/logs/backend_error.log
autostart=true
autorestart=true
redirect_stderr=true
environment=PATH="/root/.venv/bin:%(ENV_PATH)s"

[program:frontend]
command=yarn start
directory=/app/frontend
stdout_logfile=/app/logs/frontend.log  
stderr_logfile=/app/logs/frontend_error.log
autostart=true
autorestart=true
redirect_stderr=true
environment=PATH="/root/.nvm/versions/node/v20.18.1/bin:%(ENV_PATH)s"

[program:redis]
command=python3 -c "
import time, threading, logging
from collections import defaultdict
import json

class MockRedis:
    def __init__(self):
        self.data = {}
        self.expiry = {}
        
    def setex(self, key, ttl, value):
        self.data[key] = value
        self.expiry[key] = time.time() + ttl
        
    def get(self, key):
        if key in self.expiry and time.time() > self.expiry[key]:
            del self.data[key]
            del self.expiry[key]
            return None
        return self.data.get(key)
        
    def ping(self):
        return True

# Mock Redis Server starten
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('MockRedis')
logger.info('Mock Redis Server gestartet')

# Endlos laufen
while True:
    time.sleep(60)
    logger.info(f'Mock Redis aktiv - {len(MockRedis().data)} Keys')
"
stdout_logfile=/app/logs/redis.log
stderr_logfile=/app/logs/redis_error.log
autostart=true
autorestart=true
redirect_stderr=true

[program:celery_workers]
command=python3 start_workers.py
directory=/app/backend
stdout_logfile=/app/logs/celery_workers.log
stderr_logfile=/app/logs/celery_workers_error.log
autostart=true
autorestart=true
redirect_stderr=true
environment=PATH="/root/.venv/bin:%(ENV_PATH)s"

[program:automation_manager]
command=python3 automation_manager.py
directory=/app/backend
stdout_logfile=/app/logs/automation_manager.log
stderr_logfile=/app/logs/automation_manager_error.log
autostart=true
autorestart=true
redirect_stderr=true
environment=PATH="/root/.venv/bin:%(ENV_PATH)s"

[group:leadmaps_automation]
programs=redis,celery_workers,automation_manager
priority=999